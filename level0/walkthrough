# Level 0 - Walkthrough

## Objective
Get the password for level1 by exploiting level0 binary.

## Step 1: Initial Analysis
```bash
level0@RainFall:~$ ls -la
-rwsr-x---+ 1 level1 users 7355 Mar  6  2016 level0

level0@RainFall:~$ ./level0
Segmentation fault (core dumped)

level0@RainFall:~$ ./level0 test
No !
```

**Observations:**
- Binary has SUID bit set (runs as level1)
- Needs an argument
- "No !" output suggests a comparison check

## Step 2: Disassemble with GDB
```bash
gdb ./level0
(gdb) disas main
```

**Key Assembly:**
```nasm
0x08048ed4 <+20>:    call   0x8049710 <atoi>
0x08048ed9 <+25>:    cmp    eax,0x1a7
0x08048ede <+30>:    jne    0x8048f58 <main+152>
```

**Analysis:**
- `atoi()` converts argument to integer
- Compares with `0x1a7` (423 in decimal)
- If equal, jumps to shell execution
- If not equal, prints "No !"

## Step 3: Calculate the Magic Number
```bash
level0@RainFall:~$ python -c "print 0x1a7"
423
```

## Step 4: Exploit
```bash
level0@RainFall:~$ ./level0 423
$ whoami
level1
$ cat /home/user/level1/.pass
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a
```

## Password
1fe8a524fa4bec01ca4ea2a869af2a02260d4a7d5fe7e7c24d8617e6dca12d3a


## Key Takeaways
- Simple integer comparison vulnerability
- SUID binary gives elevated privileges
- `atoi()` function converts string to integer
